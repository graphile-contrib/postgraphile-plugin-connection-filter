// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with the filter plugin and the \`connectionFilterRelations: true\` option 1`] = `
"type Backward implements Node {
  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Backward\`.\\"\\"\\"
  filterableByFilterableId: Filterable
  filterableId: Int
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

type BackwardCompound implements Node {
  backwardCompound1: Int!
  backwardCompound2: Int!

  \\"\\"\\"
  Reads a single \`Filterable\` that is related to this \`BackwardCompound\`.
  \\"\\"\\"
  filterableByBackwardCompound1AndBackwardCompound2: Filterable
  name: String

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A filter to be used against \`BackwardCompound\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input BackwardCompoundFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [BackwardCompoundFilter!]

  \\"\\"\\"Filter by the object’s \`backwardCompound1\` field.\\"\\"\\"
  backwardCompound1: IntFilter

  \\"\\"\\"Filter by the object’s \`backwardCompound2\` field.\\"\\"\\"
  backwardCompound2: IntFilter

  \\"\\"\\"
  Filter by the object’s \`filterableByBackwardCompound1AndBackwardCompound2\` field.
  \\"\\"\\"
  filterableByBackwardCompound1AndBackwardCompound2: FilterableFilter

  \\"\\"\\"Filter by the object’s \`name\` field.\\"\\"\\"
  name: StringFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: BackwardCompoundFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [BackwardCompoundFilter!]
}

\\"\\"\\"A connection to a list of \`BackwardCompound\` values.\\"\\"\\"
type BackwardCompoundsConnection {
  \\"\\"\\"
  A list of edges which contains the \`BackwardCompound\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [BackwardCompoundsEdge!]!

  \\"\\"\\"A list of \`BackwardCompound\` objects.\\"\\"\\"
  nodes: [BackwardCompound]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"
  The count of *all* \`BackwardCompound\` you could get from the connection.
  \\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`BackwardCompound\` edge in the connection.\\"\\"\\"
type BackwardCompoundsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`BackwardCompound\` at the end of the edge.\\"\\"\\"
  node: BackwardCompound
}

\\"\\"\\"Methods to use when ordering \`BackwardCompound\`.\\"\\"\\"
enum BackwardCompoundsOrderBy {
  BACKWARD_COMPOUND_1_ASC
  BACKWARD_COMPOUND_1_DESC
  BACKWARD_COMPOUND_2_ASC
  BACKWARD_COMPOUND_2_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"
A filter to be used against \`Backward\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input BackwardFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [BackwardFilter!]

  \\"\\"\\"Filter by the object’s \`filterableByFilterableId\` field.\\"\\"\\"
  filterableByFilterableId: FilterableFilter

  \\"\\"\\"Filter by the object’s \`filterableId\` field.\\"\\"\\"
  filterableId: IntFilter

  \\"\\"\\"Filter by the object’s \`id\` field.\\"\\"\\"
  id: IntFilter

  \\"\\"\\"Filter by the object’s \`name\` field.\\"\\"\\"
  name: StringFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: BackwardFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [BackwardFilter!]
}

\\"\\"\\"A connection to a list of \`Backward\` values.\\"\\"\\"
type BackwardsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Backward\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [BackwardsEdge!]!

  \\"\\"\\"A list of \`Backward\` objects.\\"\\"\\"
  nodes: [Backward]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Backward\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Backward\` edge in the connection.\\"\\"\\"
type BackwardsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Backward\` at the end of the edge.\\"\\"\\"
  node: Backward
}

\\"\\"\\"Methods to use when ordering \`Backward\`.\\"\\"\\"
enum BackwardsOrderBy {
  FILTERABLE_ID_ASC
  FILTERABLE_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"
A floating point number that requires more precision than IEEE 754 binary 64
\\"\\"\\"
scalar BigFloat

\\"\\"\\"
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input BigFloatFilter {
  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: BigFloat

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: BigFloat

  \\"\\"\\"Greater than the specified value.\\"\\"\\"
  greaterThan: BigFloat

  \\"\\"\\"Greater than or equal to the specified value.\\"\\"\\"
  greaterThanOrEqualTo: BigFloat

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [BigFloat!]

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Less than the specified value.\\"\\"\\"
  lessThan: BigFloat

  \\"\\"\\"Less than or equal to the specified value.\\"\\"\\"
  lessThanOrEqualTo: BigFloat

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: BigFloat

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: BigFloat

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [BigFloat!]
}

\\"\\"\\"
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input BooleanFilter {
  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: Boolean

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: Boolean

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [Boolean!]

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: Boolean

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: Boolean

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [Boolean!]
}

type Child implements Node {
  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Child\`.\\"\\"\\"
  filterableByFilterableId: Filterable
  filterableId: Int
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A filter to be used against \`Child\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input ChildFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [ChildFilter!]

  \\"\\"\\"Filter by the object’s \`filterableByFilterableId\` field.\\"\\"\\"
  filterableByFilterableId: FilterableFilter

  \\"\\"\\"Filter by the object’s \`filterableId\` field.\\"\\"\\"
  filterableId: IntFilter

  \\"\\"\\"Filter by the object’s \`id\` field.\\"\\"\\"
  id: IntFilter

  \\"\\"\\"Filter by the object’s \`name\` field.\\"\\"\\"
  name: StringFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: ChildFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [ChildFilter!]
}

\\"\\"\\"A connection to a list of \`Child\` values.\\"\\"\\"
type ChildrenConnection {
  \\"\\"\\"
  A list of edges which contains the \`Child\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ChildrenEdge!]!

  \\"\\"\\"A list of \`Child\` objects.\\"\\"\\"
  nodes: [Child]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Child\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Child\` edge in the connection.\\"\\"\\"
type ChildrenEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Child\` at the end of the edge.\\"\\"\\"
  node: Child
}

\\"\\"\\"Methods to use when ordering \`Child\`.\\"\\"\\"
enum ChildrenOrderBy {
  FILTERABLE_ID_ASC
  FILTERABLE_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

type Filterable implements Node {
  \\"\\"\\"Reads a single \`Backward\` that is related to this \`Filterable\`.\\"\\"\\"
  backwardByFilterableId: Backward
  backwardCompound1: Int
  backwardCompound2: Int

  \\"\\"\\"
  Reads a single \`BackwardCompound\` that is related to this \`Filterable\`.
  \\"\\"\\"
  backwardCompoundByBackwardCompound1AndBackwardCompound2: BackwardCompound
  boolean: Boolean

  \\"\\"\\"Reads and enables pagination through a set of \`Child\`.\\"\\"\\"
  childrenByFilterableId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: ChildFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Child\`.\\"\\"\\"
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!
  computed: String
  computed2: String
  computedChild: Child
  computedIntArray: [Int]

  \\"\\"\\"Reads and enables pagination through a set of \`Child\`.\\"\\"\\"
  computedSetofChild(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: ChildFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int
  ): ChildrenConnection!
  computedSetofInt(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: IntFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int
  ): FilterableComputedSetofIntConnection!
  enum: Mood

  \\"\\"\\"Reads a single \`Forward\` that is related to this \`Filterable\`.\\"\\"\\"
  forwardByForwardId: Forward
  forwardCompound1: Int
  forwardCompound2: Int

  \\"\\"\\"
  Reads a single \`ForwardCompound\` that is related to this \`Filterable\`.
  \\"\\"\\"
  forwardCompoundByForwardCompound1AndForwardCompound2: ForwardCompound
  forwardId: Int
  id: Int!
  inet: InternetAddress
  int: Int
  intArray: [Int]
  jsonb: JSON

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  numeric: BigFloat

  \\"\\"\\"Reads a single \`Parent\` that is related to this \`Filterable\`.\\"\\"\\"
  parentByParentId: Parent
  parentId: Int
  real: Float
  string: String
}

\\"\\"\\"A connection to a list of \`Int\` values.\\"\\"\\"
type FilterableComputedSetofIntConnection {
  \\"\\"\\"
  A list of edges which contains the \`Int\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FilterableComputedSetofIntEdge!]!

  \\"\\"\\"A list of \`Int\` objects.\\"\\"\\"
  nodes: [Int]!
}

\\"\\"\\"A \`Int\` edge in the connection.\\"\\"\\"
type FilterableComputedSetofIntEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Int\` at the end of the edge.\\"\\"\\"
  node: Int
}

\\"\\"\\"
A filter to be used against \`Filterable\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input FilterableFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [FilterableFilter!]

  \\"\\"\\"Filter by the object’s \`backwardByFilterableId\` field.\\"\\"\\"
  backwardByFilterableId: BackwardFilter

  \\"\\"\\"Filter by the object’s \`backwardCompound1\` field.\\"\\"\\"
  backwardCompound1: IntFilter

  \\"\\"\\"Filter by the object’s \`backwardCompound2\` field.\\"\\"\\"
  backwardCompound2: IntFilter

  \\"\\"\\"
  Filter by the object’s \`backwardCompoundByBackwardCompound1AndBackwardCompound2\` field.
  \\"\\"\\"
  backwardCompoundByBackwardCompound1AndBackwardCompound2: BackwardCompoundFilter

  \\"\\"\\"Filter by the object’s \`boolean\` field.\\"\\"\\"
  boolean: BooleanFilter

  \\"\\"\\"Filter by the object’s \`computed\` field.\\"\\"\\"
  computed: StringFilter

  \\"\\"\\"Filter by the object’s \`computedIntArray\` field.\\"\\"\\"
  computedIntArray: IntListFilter

  \\"\\"\\"Filter by the object’s \`enum\` field.\\"\\"\\"
  enum: MoodFilter

  \\"\\"\\"Filter by the object’s \`forwardByForwardId\` field.\\"\\"\\"
  forwardByForwardId: ForwardFilter

  \\"\\"\\"Filter by the object’s \`forwardCompound1\` field.\\"\\"\\"
  forwardCompound1: IntFilter

  \\"\\"\\"Filter by the object’s \`forwardCompound2\` field.\\"\\"\\"
  forwardCompound2: IntFilter

  \\"\\"\\"
  Filter by the object’s \`forwardCompoundByForwardCompound1AndForwardCompound2\` field.
  \\"\\"\\"
  forwardCompoundByForwardCompound1AndForwardCompound2: ForwardCompoundFilter

  \\"\\"\\"Filter by the object’s \`forwardId\` field.\\"\\"\\"
  forwardId: IntFilter

  \\"\\"\\"Filter by the object’s \`id\` field.\\"\\"\\"
  id: IntFilter

  \\"\\"\\"Filter by the object’s \`inet\` field.\\"\\"\\"
  inet: InternetAddressFilter

  \\"\\"\\"Filter by the object’s \`int\` field.\\"\\"\\"
  int: IntFilter

  \\"\\"\\"Filter by the object’s \`intArray\` field.\\"\\"\\"
  intArray: IntListFilter

  \\"\\"\\"Filter by the object’s \`jsonb\` field.\\"\\"\\"
  jsonb: JSONFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: FilterableFilter

  \\"\\"\\"Filter by the object’s \`numeric\` field.\\"\\"\\"
  numeric: BigFloatFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [FilterableFilter!]

  \\"\\"\\"Filter by the object’s \`parentByParentId\` field.\\"\\"\\"
  parentByParentId: ParentFilter

  \\"\\"\\"Filter by the object’s \`parentId\` field.\\"\\"\\"
  parentId: IntFilter

  \\"\\"\\"Filter by the object’s \`string\` field.\\"\\"\\"
  string: StringFilter
}

\\"\\"\\"A connection to a list of \`Filterable\` values.\\"\\"\\"
type FilterablesConnection {
  \\"\\"\\"
  A list of edges which contains the \`Filterable\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FilterablesEdge!]!

  \\"\\"\\"A list of \`Filterable\` objects.\\"\\"\\"
  nodes: [Filterable]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Filterable\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Filterable\` edge in the connection.\\"\\"\\"
type FilterablesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Filterable\` at the end of the edge.\\"\\"\\"
  node: Filterable
}

\\"\\"\\"Methods to use when ordering \`Filterable\`.\\"\\"\\"
enum FilterablesOrderBy {
  BACKWARD_COMPOUND_1_ASC
  BACKWARD_COMPOUND_1_DESC
  BACKWARD_COMPOUND_2_ASC
  BACKWARD_COMPOUND_2_DESC
  BOOLEAN_ASC
  BOOLEAN_DESC
  ENUM_ASC
  ENUM_DESC
  FORWARD_COMPOUND_1_ASC
  FORWARD_COMPOUND_1_DESC
  FORWARD_COMPOUND_2_ASC
  FORWARD_COMPOUND_2_DESC
  FORWARD_ID_ASC
  FORWARD_ID_DESC
  ID_ASC
  ID_DESC
  INET_ASC
  INET_DESC
  INT_ARRAY_ASC
  INT_ARRAY_DESC
  INT_ASC
  INT_DESC
  JSONB_ASC
  JSONB_DESC
  NATURAL
  NUMERIC_ASC
  NUMERIC_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REAL_ASC
  REAL_DESC
  STRING_ASC
  STRING_DESC
}

type Forward implements Node {
  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Forward\`.\\"\\"\\"
  filterableByForwardId: Filterable
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

type ForwardCompound implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`Filterable\`.\\"\\"\\"
  filterablesByForwardCompound1AndForwardCompound2(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: FilterableFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesConnection!
  forwardCompound1: Int!
  forwardCompound2: Int!
  name: String

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A filter to be used against \`ForwardCompound\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input ForwardCompoundFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [ForwardCompoundFilter!]

  \\"\\"\\"Filter by the object’s \`forwardCompound1\` field.\\"\\"\\"
  forwardCompound1: IntFilter

  \\"\\"\\"Filter by the object’s \`forwardCompound2\` field.\\"\\"\\"
  forwardCompound2: IntFilter

  \\"\\"\\"Filter by the object’s \`name\` field.\\"\\"\\"
  name: StringFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: ForwardCompoundFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [ForwardCompoundFilter!]
}

\\"\\"\\"A connection to a list of \`ForwardCompound\` values.\\"\\"\\"
type ForwardCompoundsConnection {
  \\"\\"\\"
  A list of edges which contains the \`ForwardCompound\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ForwardCompoundsEdge!]!

  \\"\\"\\"A list of \`ForwardCompound\` objects.\\"\\"\\"
  nodes: [ForwardCompound]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"
  The count of *all* \`ForwardCompound\` you could get from the connection.
  \\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`ForwardCompound\` edge in the connection.\\"\\"\\"
type ForwardCompoundsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`ForwardCompound\` at the end of the edge.\\"\\"\\"
  node: ForwardCompound
}

\\"\\"\\"Methods to use when ordering \`ForwardCompound\`.\\"\\"\\"
enum ForwardCompoundsOrderBy {
  FORWARD_COMPOUND_1_ASC
  FORWARD_COMPOUND_1_DESC
  FORWARD_COMPOUND_2_ASC
  FORWARD_COMPOUND_2_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"
A filter to be used against \`Forward\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input ForwardFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [ForwardFilter!]

  \\"\\"\\"Filter by the object’s \`filterableByForwardId\` field.\\"\\"\\"
  filterableByForwardId: FilterableFilter

  \\"\\"\\"Filter by the object’s \`id\` field.\\"\\"\\"
  id: IntFilter

  \\"\\"\\"Filter by the object’s \`name\` field.\\"\\"\\"
  name: StringFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: ForwardFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [ForwardFilter!]
}

\\"\\"\\"A connection to a list of \`Forward\` values.\\"\\"\\"
type ForwardsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Forward\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ForwardsEdge!]!

  \\"\\"\\"A list of \`Forward\` objects.\\"\\"\\"
  nodes: [Forward]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Forward\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Forward\` edge in the connection.\\"\\"\\"
type ForwardsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Forward\` at the end of the edge.\\"\\"\\"
  node: Forward
}

\\"\\"\\"Methods to use when ordering \`Forward\`.\\"\\"\\"
enum ForwardsOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type FullyOmitted implements Node {
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  string: String
}

\\"\\"\\"A connection to a list of \`FullyOmitted\` values.\\"\\"\\"
type FullyOmittedsConnection {
  \\"\\"\\"
  A list of edges which contains the \`FullyOmitted\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FullyOmittedsEdge!]!

  \\"\\"\\"A list of \`FullyOmitted\` objects.\\"\\"\\"
  nodes: [FullyOmitted]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`FullyOmitted\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`FullyOmitted\` edge in the connection.\\"\\"\\"
type FullyOmittedsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`FullyOmitted\` at the end of the edge.\\"\\"\\"
  node: FullyOmitted
}

\\"\\"\\"Methods to use when ordering \`FullyOmitted\`.\\"\\"\\"
enum FullyOmittedsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STRING_ASC
  STRING_DESC
}

\\"\\"\\"An IPv4 or IPv6 host address, and optionally its subnet.\\"\\"\\"
scalar InternetAddress

\\"\\"\\"
A filter to be used against InternetAddress fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input InternetAddressFilter {
  \\"\\"\\"Contained by the specified internet address.\\"\\"\\"
  containedBy: InternetAddress

  \\"\\"\\"Contained by or equal to the specified internet address.\\"\\"\\"
  containedByOrEqualTo: InternetAddress

  \\"\\"\\"Contains the specified internet address.\\"\\"\\"
  contains: InternetAddress

  \\"\\"\\"Contains or contained by the specified internet address.\\"\\"\\"
  containsOrContainedBy: InternetAddress

  \\"\\"\\"Contains or equal to the specified internet address.\\"\\"\\"
  containsOrEqualTo: InternetAddress

  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: InternetAddress

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: InternetAddress

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [InternetAddress!]

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: InternetAddress

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: InternetAddress

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [InternetAddress!]
}

\\"\\"\\"
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input IntFilter {
  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: Int

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: Int

  \\"\\"\\"Greater than the specified value.\\"\\"\\"
  greaterThan: Int

  \\"\\"\\"Greater than or equal to the specified value.\\"\\"\\"
  greaterThanOrEqualTo: Int

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [Int!]

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Less than the specified value.\\"\\"\\"
  lessThan: Int

  \\"\\"\\"Less than or equal to the specified value.\\"\\"\\"
  lessThanOrEqualTo: Int

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: Int

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: Int

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [Int!]
}

\\"\\"\\"
A filter to be used against Int List fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input IntListFilter {
  \\"\\"\\"Any array item is equal to the specified value.\\"\\"\\"
  anyEqualTo: Int

  \\"\\"\\"Any array item is greater than the specified value.\\"\\"\\"
  anyGreaterThan: Int

  \\"\\"\\"Any array item is greater than or equal to the specified value.\\"\\"\\"
  anyGreaterThanOrEqualTo: Int

  \\"\\"\\"Any array item is less than the specified value.\\"\\"\\"
  anyLessThan: Int

  \\"\\"\\"Any array item is less than or equal to the specified value.\\"\\"\\"
  anyLessThanOrEqualTo: Int

  \\"\\"\\"Any array item is not equal to the specified value.\\"\\"\\"
  anyNotEqualTo: Int

  \\"\\"\\"Contained by the specified list of values.\\"\\"\\"
  containedBy: [Int]

  \\"\\"\\"Contains the specified list of values.\\"\\"\\"
  contains: [Int]

  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: [Int]

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: [Int]

  \\"\\"\\"Greater than the specified value.\\"\\"\\"
  greaterThan: [Int]

  \\"\\"\\"Greater than or equal to the specified value.\\"\\"\\"
  greaterThanOrEqualTo: [Int]

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Less than the specified value.\\"\\"\\"
  lessThan: [Int]

  \\"\\"\\"Less than or equal to the specified value.\\"\\"\\"
  lessThanOrEqualTo: [Int]

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: [Int]

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: [Int]

  \\"\\"\\"Overlaps the specified list of values.\\"\\"\\"
  overlaps: [Int]
}

\\"\\"\\"
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
\\"\\"\\"
scalar JSON

\\"\\"\\"
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input JSONFilter {
  \\"\\"\\"Contained by the specified JSON.\\"\\"\\"
  containedBy: JSON

  \\"\\"\\"Contains the specified JSON.\\"\\"\\"
  contains: JSON

  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: JSON

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: JSON

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [JSON!]

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: JSON

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: JSON

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [JSON!]
}

enum Mood {
  HAPPY
  OK
  SAD
}

\\"\\"\\"
A filter to be used against Mood fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input MoodFilter {
  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: Mood

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: Mood

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [Mood!]

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: Mood

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: Mood

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [Mood!]
}

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor
}

type Parent implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`Filterable\`.\\"\\"\\"
  filterablesByParentId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: FilterableFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesConnection!
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A filter to be used against \`Parent\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input ParentFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [ParentFilter!]

  \\"\\"\\"Filter by the object’s \`id\` field.\\"\\"\\"
  id: IntFilter

  \\"\\"\\"Filter by the object’s \`name\` field.\\"\\"\\"
  name: StringFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: ParentFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [ParentFilter!]
}

\\"\\"\\"A connection to a list of \`Parent\` values.\\"\\"\\"
type ParentsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Parent\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ParentsEdge!]!

  \\"\\"\\"A list of \`Parent\` objects.\\"\\"\\"
  nodes: [Parent]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Parent\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Parent\` edge in the connection.\\"\\"\\"
type ParentsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Parent\` at the end of the edge.\\"\\"\\"
  node: Parent
}

\\"\\"\\"Methods to use when ordering \`Parent\`.\\"\\"\\"
enum ParentsOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`BackwardCompound\`.\\"\\"\\"
  allBackwardCompounds(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: BackwardCompoundFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`BackwardCompound\`.\\"\\"\\"
    orderBy: [BackwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardCompoundsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Backward\`.\\"\\"\\"
  allBackwards(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: BackwardFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Backward\`.\\"\\"\\"
    orderBy: [BackwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Child\`.\\"\\"\\"
  allChildren(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: ChildFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Child\`.\\"\\"\\"
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Filterable\`.\\"\\"\\"
  allFilterables(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: FilterableFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesConnection

  \\"\\"\\"Reads and enables pagination through a set of \`ForwardCompound\`.\\"\\"\\"
  allForwardCompounds(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: ForwardCompoundFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`ForwardCompound\`.\\"\\"\\"
    orderBy: [ForwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardCompoundsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Forward\`.\\"\\"\\"
  allForwards(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: ForwardFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Forward\`.\\"\\"\\"
    orderBy: [ForwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`FullyOmitted\`.\\"\\"\\"
  allFullyOmitteds(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`FullyOmitted\`.\\"\\"\\"
    orderBy: [FullyOmittedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FullyOmittedsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Parent\`.\\"\\"\\"
  allParents(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: ParentFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Parent\`.\\"\\"\\"
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Unfilterable\`.\\"\\"\\"
  allUnfilterables(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Unfilterable\`.\\"\\"\\"
    orderBy: [UnfilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnfilterablesConnection

  \\"\\"\\"Reads a single \`Backward\` using its globally unique \`ID\`.\\"\\"\\"
  backward(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Backward\`.\\"\\"\\"
    nodeId: ID!
  ): Backward
  backwardByFilterableId(filterableId: Int!): Backward
  backwardById(id: Int!): Backward

  \\"\\"\\"Reads a single \`BackwardCompound\` using its globally unique \`ID\`.\\"\\"\\"
  backwardCompound(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`BackwardCompound\`.
    \\"\\"\\"
    nodeId: ID!
  ): BackwardCompound
  backwardCompoundByBackwardCompound1AndBackwardCompound2(backwardCompound1: Int!, backwardCompound2: Int!): BackwardCompound

  \\"\\"\\"Reads a single \`Child\` using its globally unique \`ID\`.\\"\\"\\"
  child(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Child\`.\\"\\"\\"
    nodeId: ID!
  ): Child
  childById(id: Int!): Child

  \\"\\"\\"Reads a single \`Filterable\` using its globally unique \`ID\`.\\"\\"\\"
  filterable(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`Filterable\`.
    \\"\\"\\"
    nodeId: ID!
  ): Filterable
  filterableByBackwardCompound1AndBackwardCompound2(backwardCompound1: Int!, backwardCompound2: Int!): Filterable
  filterableByForwardId(forwardId: Int!): Filterable
  filterableById(id: Int!): Filterable

  \\"\\"\\"Reads a single \`Forward\` using its globally unique \`ID\`.\\"\\"\\"
  forward(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Forward\`.\\"\\"\\"
    nodeId: ID!
  ): Forward
  forwardById(id: Int!): Forward

  \\"\\"\\"Reads a single \`ForwardCompound\` using its globally unique \`ID\`.\\"\\"\\"
  forwardCompound(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`ForwardCompound\`.
    \\"\\"\\"
    nodeId: ID!
  ): ForwardCompound
  forwardCompoundByForwardCompound1AndForwardCompound2(forwardCompound1: Int!, forwardCompound2: Int!): ForwardCompound

  \\"\\"\\"Reads a single \`FullyOmitted\` using its globally unique \`ID\`.\\"\\"\\"
  fullyOmitted(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`FullyOmitted\`.
    \\"\\"\\"
    nodeId: ID!
  ): FullyOmitted
  fullyOmittedById(id: Int!): FullyOmitted

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`Parent\` using its globally unique \`ID\`.\\"\\"\\"
  parent(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Parent\`.\\"\\"\\"
    nodeId: ID!
  ): Parent
  parentById(id: Int!): Parent

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!

  \\"\\"\\"Reads a single \`Unfilterable\` using its globally unique \`ID\`.\\"\\"\\"
  unfilterable(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`Unfilterable\`.
    \\"\\"\\"
    nodeId: ID!
  ): Unfilterable
  unfilterableById(id: Int!): Unfilterable
}

\\"\\"\\"
A filter to be used against String fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input StringFilter {
  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: String

  \\"\\"\\"Ends with the specified string (case-sensitive).\\"\\"\\"
  endsWith: String

  \\"\\"\\"Ends with the specified string (case-insensitive).\\"\\"\\"
  endsWithInsensitive: String

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: String

  \\"\\"\\"Greater than the specified value.\\"\\"\\"
  greaterThan: String

  \\"\\"\\"Greater than or equal to the specified value.\\"\\"\\"
  greaterThanOrEqualTo: String

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [String!]

  \\"\\"\\"Contains the specified string (case-sensitive).\\"\\"\\"
  includes: String

  \\"\\"\\"Contains the specified string (case-insensitive).\\"\\"\\"
  includesInsensitive: String

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Less than the specified value.\\"\\"\\"
  lessThan: String

  \\"\\"\\"Less than or equal to the specified value.\\"\\"\\"
  lessThanOrEqualTo: String

  \\"\\"\\"
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  \\"\\"\\"
  like: String

  \\"\\"\\"
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  \\"\\"\\"
  likeInsensitive: String

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: String

  \\"\\"\\"Does not end with the specified string (case-sensitive).\\"\\"\\"
  notEndsWith: String

  \\"\\"\\"Does not end with the specified string (case-insensitive).\\"\\"\\"
  notEndsWithInsensitive: String

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: String

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [String!]

  \\"\\"\\"Does not contain the specified string (case-sensitive).\\"\\"\\"
  notIncludes: String

  \\"\\"\\"Does not contain the specified string (case-insensitive).\\"\\"\\"
  notIncludesInsensitive: String

  \\"\\"\\"
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  \\"\\"\\"
  notLike: String

  \\"\\"\\"
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  \\"\\"\\"
  notLikeInsensitive: String

  \\"\\"\\"
  Does not match the specified pattern using the SQL standard's definition of a regular expression.
  \\"\\"\\"
  notSimilarTo: String

  \\"\\"\\"Does not start with the specified string (case-sensitive).\\"\\"\\"
  notStartsWith: String

  \\"\\"\\"Does not start with the specified string (case-insensitive).\\"\\"\\"
  notStartsWithInsensitive: String

  \\"\\"\\"
  Matches the specified pattern using the SQL standard's definition of a regular expression.
  \\"\\"\\"
  similarTo: String

  \\"\\"\\"Starts with the specified string (case-sensitive).\\"\\"\\"
  startsWith: String

  \\"\\"\\"Starts with the specified string (case-insensitive).\\"\\"\\"
  startsWithInsensitive: String
}

type Unfilterable implements Node {
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  string: String
}

\\"\\"\\"A connection to a list of \`Unfilterable\` values.\\"\\"\\"
type UnfilterablesConnection {
  \\"\\"\\"
  A list of edges which contains the \`Unfilterable\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [UnfilterablesEdge!]!

  \\"\\"\\"A list of \`Unfilterable\` objects.\\"\\"\\"
  nodes: [Unfilterable]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Unfilterable\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Unfilterable\` edge in the connection.\\"\\"\\"
type UnfilterablesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Unfilterable\` at the end of the edge.\\"\\"\\"
  node: Unfilterable
}

\\"\\"\\"Methods to use when ordering \`Unfilterable\`.\\"\\"\\"
enum UnfilterablesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STRING_ASC
  STRING_DESC
}
"
`;
