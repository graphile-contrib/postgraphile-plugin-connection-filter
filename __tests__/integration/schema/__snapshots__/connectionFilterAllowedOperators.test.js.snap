// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with the filter plugin and the connectionFilterAllowedOperators option 1`] = `
"\\"\\"\\"
A floating point number that requires more precision than IEEE 754 binary 64
\\"\\"\\"
scalar BigFloat

\\"\\"\\"
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input BigFloatFilter {
  \\"\\"\\"Checks for values equal to this value.\\"\\"\\"
  equalTo: BigFloat

  \\"\\"\\"Checks for values not equal to this value.\\"\\"\\"
  notEqualTo: BigFloat
}

\\"\\"\\"
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input BooleanFilter {
  \\"\\"\\"Checks for values equal to this value.\\"\\"\\"
  equalTo: Boolean

  \\"\\"\\"Checks for values not equal to this value.\\"\\"\\"
  notEqualTo: Boolean
}

\\"\\"\\"All input for the create \`Filterable\` mutation.\\"\\"\\"
input CreateFilterableInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Filterable\` to be created by this mutation.\\"\\"\\"
  filterable: FilterableInput!
}

\\"\\"\\"The output of our create \`Filterable\` mutation.\\"\\"\\"
type CreateFilterablePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Filterable\` that was created by this mutation.\\"\\"\\"
  filterable: Filterable

  \\"\\"\\"An edge for our \`Filterable\`. May be used by Relay 1.\\"\\"\\"
  filterableEdge(
    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

\\"\\"\\"All input for the \`deleteFilterableById\` mutation.\\"\\"\\"
input DeleteFilterableByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`deleteFilterable\` mutation.\\"\\"\\"
input DeleteFilterableInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Filterable\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Filterable\` mutation.\\"\\"\\"
type DeleteFilterablePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedFilterableId: ID

  \\"\\"\\"The \`Filterable\` that was deleted by this mutation.\\"\\"\\"
  filterable: Filterable

  \\"\\"\\"An edge for our \`Filterable\`. May be used by Relay 1.\\"\\"\\"
  filterableEdge(
    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

type Filterable implements Node {
  boolean: Boolean
  computed: String
  computed2: String
  id: Int!
  inet: InternetAddress
  int: Int
  intArray: [Int]
  jsonb: JSON

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  numeric: BigFloat
  real: Float
  string: String
}

\\"\\"\\"
A condition to be used against \`Filterable\` object types. All fields are tested
for equality and combined with a logical ‘and.’
\\"\\"\\"
input FilterableCondition {
  \\"\\"\\"Checks for equality with the object’s \`boolean\` field.\\"\\"\\"
  boolean: Boolean

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`inet\` field.\\"\\"\\"
  inet: InternetAddress

  \\"\\"\\"Checks for equality with the object’s \`int\` field.\\"\\"\\"
  int: Int

  \\"\\"\\"Checks for equality with the object’s \`intArray\` field.\\"\\"\\"
  intArray: [Int]

  \\"\\"\\"Checks for equality with the object’s \`jsonb\` field.\\"\\"\\"
  jsonb: JSON

  \\"\\"\\"Checks for equality with the object’s \`numeric\` field.\\"\\"\\"
  numeric: BigFloat

  \\"\\"\\"Checks for equality with the object’s \`string\` field.\\"\\"\\"
  string: String
}

\\"\\"\\"
A filter to be used against \`Filterable\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input FilterableFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [FilterableFilter!]

  \\"\\"\\"Filter by the object’s \`boolean\` field.\\"\\"\\"
  boolean: BooleanFilter

  \\"\\"\\"Filter by the object’s \`computed\` field.\\"\\"\\"
  computed: StringFilter

  \\"\\"\\"Filter by the object’s \`id\` field.\\"\\"\\"
  id: IntFilter

  \\"\\"\\"Filter by the object’s \`inet\` field.\\"\\"\\"
  inet: InternetAddressFilter

  \\"\\"\\"Filter by the object’s \`int\` field.\\"\\"\\"
  int: IntFilter

  \\"\\"\\"Filter by the object’s \`intArray\` field.\\"\\"\\"
  intArray: IntListFilter

  \\"\\"\\"Filter by the object’s \`jsonb\` field.\\"\\"\\"
  jsonb: JSONFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: FilterableFilter

  \\"\\"\\"Filter by the object’s \`numeric\` field.\\"\\"\\"
  numeric: BigFloatFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [FilterableFilter!]

  \\"\\"\\"Filter by the object’s \`string\` field.\\"\\"\\"
  string: StringFilter
}

\\"\\"\\"An input for mutations affecting \`Filterable\`\\"\\"\\"
input FilterableInput {
  boolean: Boolean
  id: Int
  inet: InternetAddress
  int: Int
  intArray: [Int]
  jsonb: JSON
  numeric: BigFloat
  real: Float
  string: String
}

\\"\\"\\"
Represents an update to a \`Filterable\`. Fields that are set will be updated.
\\"\\"\\"
input FilterablePatch {
  boolean: Boolean
  id: Int
  inet: InternetAddress
  int: Int
  intArray: [Int]
  jsonb: JSON
  numeric: BigFloat
  real: Float
  string: String
}

\\"\\"\\"A connection to a list of \`Filterable\` values.\\"\\"\\"
type FilterablesConnection {
  \\"\\"\\"
  A list of edges which contains the \`Filterable\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FilterablesEdge!]!

  \\"\\"\\"A list of \`Filterable\` objects.\\"\\"\\"
  nodes: [Filterable]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Filterable\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Filterable\` edge in the connection.\\"\\"\\"
type FilterablesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Filterable\` at the end of the edge.\\"\\"\\"
  node: Filterable
}

\\"\\"\\"Methods to use when ordering \`Filterable\`.\\"\\"\\"
enum FilterablesOrderBy {
  BOOLEAN_ASC
  BOOLEAN_DESC
  ID_ASC
  ID_DESC
  INET_ASC
  INET_DESC
  INT_ARRAY_ASC
  INT_ARRAY_DESC
  INT_ASC
  INT_DESC
  JSONB_ASC
  JSONB_DESC
  NATURAL
  NUMERIC_ASC
  NUMERIC_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REAL_ASC
  REAL_DESC
  STRING_ASC
  STRING_DESC
}

\\"\\"\\"An IPv4 or IPv6 host address, and optionally its subnet.\\"\\"\\"
scalar InternetAddress

\\"\\"\\"
A filter to be used against InternetAddress fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input InternetAddressFilter {
  \\"\\"\\"Checks for values equal to this value.\\"\\"\\"
  equalTo: InternetAddress

  \\"\\"\\"Checks for values not equal to this value.\\"\\"\\"
  notEqualTo: InternetAddress
}

\\"\\"\\"
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input IntFilter {
  \\"\\"\\"Checks for values equal to this value.\\"\\"\\"
  equalTo: Int

  \\"\\"\\"Checks for values not equal to this value.\\"\\"\\"
  notEqualTo: Int
}

\\"\\"\\"
A filter to be used against Int List fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input IntListFilter {
  \\"\\"\\"Checks for values equal to this value.\\"\\"\\"
  equalTo: [Int]

  \\"\\"\\"Checks for values not equal to this value.\\"\\"\\"
  notEqualTo: [Int]
}

\\"\\"\\"
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
\\"\\"\\"
scalar JSON

\\"\\"\\"
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input JSONFilter {
  \\"\\"\\"Checks for values equal to this value.\\"\\"\\"
  equalTo: JSON

  \\"\\"\\"Checks for values not equal to this value.\\"\\"\\"
  notEqualTo: JSON
}

\\"\\"\\"
The root mutation type which contains root level fields which mutate data.
\\"\\"\\"
type Mutation {
  \\"\\"\\"Creates a single \`Filterable\`.\\"\\"\\"
  createFilterable(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreateFilterableInput!
  ): CreateFilterablePayload

  \\"\\"\\"Deletes a single \`Filterable\` using its globally unique id.\\"\\"\\"
  deleteFilterable(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteFilterableInput!
  ): DeleteFilterablePayload

  \\"\\"\\"Deletes a single \`Filterable\` using a unique key.\\"\\"\\"
  deleteFilterableById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteFilterableByIdInput!
  ): DeleteFilterablePayload

  \\"\\"\\"
  Updates a single \`Filterable\` using its globally unique id and a patch.
  \\"\\"\\"
  updateFilterable(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateFilterableInput!
  ): UpdateFilterablePayload

  \\"\\"\\"Updates a single \`Filterable\` using a unique key and a patch.\\"\\"\\"
  updateFilterableById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateFilterableByIdInput!
  ): UpdateFilterablePayload
}

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`Filterable\`.\\"\\"\\"
  allFilterables(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: FilterableCondition

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: FilterableFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesConnection

  \\"\\"\\"Reads a single \`Filterable\` using its globally unique \`ID\`.\\"\\"\\"
  filterable(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`Filterable\`.
    \\"\\"\\"
    nodeId: ID!
  ): Filterable
  filterableById(id: Int!): Filterable

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!
}

\\"\\"\\"
A filter to be used against String fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input StringFilter {
  \\"\\"\\"Checks for values equal to this value.\\"\\"\\"
  equalTo: String

  \\"\\"\\"Checks for values not equal to this value.\\"\\"\\"
  notEqualTo: String
}

\\"\\"\\"All input for the \`updateFilterableById\` mutation.\\"\\"\\"
input UpdateFilterableByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  An object where the defined keys will be set on the \`Filterable\` being updated.
  \\"\\"\\"
  filterablePatch: FilterablePatch!
  id: Int!
}

\\"\\"\\"All input for the \`updateFilterable\` mutation.\\"\\"\\"
input UpdateFilterableInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  An object where the defined keys will be set on the \`Filterable\` being updated.
  \\"\\"\\"
  filterablePatch: FilterablePatch!

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Filterable\` to be updated.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our update \`Filterable\` mutation.\\"\\"\\"
type UpdateFilterablePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Filterable\` that was updated by this mutation.\\"\\"\\"
  filterable: Filterable

  \\"\\"\\"An edge for our \`Filterable\`. May be used by Relay 1.\\"\\"\\"
  filterableEdge(
    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}
"
`;
